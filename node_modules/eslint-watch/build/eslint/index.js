"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _parser = _interopRequireDefault(require("./parser"));

var _logger = _interopRequireDefault(require("../logger"));

var _execa = _interopRequireDefault(require("execa"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

const eslint = {
  getHelpOptions() {
    return _asyncToGenerator(function* () {
      const helpText = yield eslint.execute(['--help']);
      return _parser.default.parseHelp(helpText);
    })();
  },

  execute(args = []) {
    return _asyncToGenerator(function* () {
      const logger = _logger.default.createLogger('eslint');

      logger.debug('Executing %o', args);

      try {
        const result = yield (0, _execa.default)('eslint', args);
        logger.debug(result);
        return result.stdout;
      } catch (error) {
        logger.debug(error);
        throw new Error(error.stdout || error.stderr);
      }
    })();
  },

  lint(args = [], cliOpts = {}) {
    return _asyncToGenerator(function* () {
      const logger = _logger.default.createLogger('eslint');

      try {
        let endLine = '';
        const results = yield eslint.execute(args);

        if (!results.trim()) {
          if (!cliOpts.quiet) {
            logger.log(`âœ“ Clean (${new Date().toLocaleTimeString()})`);
          }

          return;
        }

        if (!/\\n{2}$/.test(results)) {
          endLine = '\n';
        }

        logger.log(`${results}${endLine}`);
      } catch (error) {
        logger.error(error.message.trim());
      }
    })();
  }

};
var _default = eslint;
exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9lc2xpbnQvaW5kZXguanMiXSwibmFtZXMiOlsiZXNsaW50IiwiZ2V0SGVscE9wdGlvbnMiLCJoZWxwVGV4dCIsImV4ZWN1dGUiLCJwYXJzZXIiLCJwYXJzZUhlbHAiLCJhcmdzIiwibG9nZ2VyIiwiTG9nZ2VyIiwiY3JlYXRlTG9nZ2VyIiwiZGVidWciLCJyZXN1bHQiLCJzdGRvdXQiLCJlcnJvciIsIkVycm9yIiwic3RkZXJyIiwibGludCIsImNsaU9wdHMiLCJlbmRMaW5lIiwicmVzdWx0cyIsInRyaW0iLCJxdWlldCIsImxvZyIsIkRhdGUiLCJ0b0xvY2FsZVRpbWVTdHJpbmciLCJ0ZXN0IiwibWVzc2FnZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOztBQUNBOzs7Ozs7OztBQUVBLE1BQU1BLE1BQU0sR0FBRztBQUNQQyxFQUFBQSxjQUFOLEdBQXVCO0FBQUE7QUFDckIsWUFBTUMsUUFBUSxTQUFTRixNQUFNLENBQUNHLE9BQVAsQ0FBZSxDQUFDLFFBQUQsQ0FBZixDQUF2QjtBQUVBLGFBQU9DLGdCQUFPQyxTQUFQLENBQWlCSCxRQUFqQixDQUFQO0FBSHFCO0FBSXRCLEdBTFk7O0FBTVBDLEVBQUFBLE9BQU4sQ0FBY0csSUFBSSxHQUFHLEVBQXJCLEVBQXlCO0FBQUE7QUFDdkIsWUFBTUMsTUFBTSxHQUFHQyxnQkFBT0MsWUFBUCxDQUFvQixRQUFwQixDQUFmOztBQUVBRixNQUFBQSxNQUFNLENBQUNHLEtBQVAsQ0FBYSxjQUFiLEVBQTZCSixJQUE3Qjs7QUFFQSxVQUFJO0FBQ0YsY0FBTUssTUFBTSxTQUFTLG9CQUFNLFFBQU4sRUFBZ0JMLElBQWhCLENBQXJCO0FBRUFDLFFBQUFBLE1BQU0sQ0FBQ0csS0FBUCxDQUFhQyxNQUFiO0FBRUEsZUFBT0EsTUFBTSxDQUFDQyxNQUFkO0FBQ0QsT0FORCxDQU1FLE9BQU9DLEtBQVAsRUFBYztBQUNkTixRQUFBQSxNQUFNLENBQUNHLEtBQVAsQ0FBYUcsS0FBYjtBQUVBLGNBQU0sSUFBSUMsS0FBSixDQUFVRCxLQUFLLENBQUNELE1BQU4sSUFBZ0JDLEtBQUssQ0FBQ0UsTUFBaEMsQ0FBTjtBQUNEO0FBZnNCO0FBZ0J4QixHQXRCWTs7QUF1QlBDLEVBQUFBLElBQU4sQ0FBV1YsSUFBSSxHQUFHLEVBQWxCLEVBQXNCVyxPQUFPLEdBQUcsRUFBaEMsRUFBb0M7QUFBQTtBQUNsQyxZQUFNVixNQUFNLEdBQUdDLGdCQUFPQyxZQUFQLENBQW9CLFFBQXBCLENBQWY7O0FBRUEsVUFBSTtBQUNGLFlBQUlTLE9BQU8sR0FBRyxFQUFkO0FBQ0EsY0FBTUMsT0FBTyxTQUFTbkIsTUFBTSxDQUFDRyxPQUFQLENBQWVHLElBQWYsQ0FBdEI7O0FBRUEsWUFBSSxDQUFDYSxPQUFPLENBQUNDLElBQVIsRUFBTCxFQUFxQjtBQUNuQixjQUFJLENBQUNILE9BQU8sQ0FBQ0ksS0FBYixFQUFvQjtBQUNsQmQsWUFBQUEsTUFBTSxDQUFDZSxHQUFQLENBQVksWUFBVyxJQUFJQyxJQUFKLEdBQVdDLGtCQUFYLEVBQWdDLEdBQXZEO0FBQ0Q7O0FBQ0Q7QUFDRDs7QUFFRCxZQUFJLENBQUMsVUFBVUMsSUFBVixDQUFlTixPQUFmLENBQUwsRUFBOEI7QUFDNUJELFVBQUFBLE9BQU8sR0FBRyxJQUFWO0FBQ0Q7O0FBRURYLFFBQUFBLE1BQU0sQ0FBQ2UsR0FBUCxDQUFZLEdBQUVILE9BQVEsR0FBRUQsT0FBUSxFQUFoQztBQUNELE9BaEJELENBZ0JFLE9BQU9MLEtBQVAsRUFBYztBQUNkTixRQUFBQSxNQUFNLENBQUNNLEtBQVAsQ0FBYUEsS0FBSyxDQUFDYSxPQUFOLENBQWNOLElBQWQsRUFBYjtBQUNEO0FBckJpQztBQXNCbkM7O0FBN0NZLENBQWY7ZUFnRGVwQixNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHBhcnNlciBmcm9tICcuL3BhcnNlcic7XG5pbXBvcnQgTG9nZ2VyIGZyb20gJy4uL2xvZ2dlcic7XG5pbXBvcnQgZXhlY2EgZnJvbSAnZXhlY2EnO1xuXG5jb25zdCBlc2xpbnQgPSB7XG4gIGFzeW5jIGdldEhlbHBPcHRpb25zKCkge1xuICAgIGNvbnN0IGhlbHBUZXh0ID0gYXdhaXQgZXNsaW50LmV4ZWN1dGUoWyctLWhlbHAnXSk7XG5cbiAgICByZXR1cm4gcGFyc2VyLnBhcnNlSGVscChoZWxwVGV4dCk7XG4gIH0sXG4gIGFzeW5jIGV4ZWN1dGUoYXJncyA9IFtdKSB7XG4gICAgY29uc3QgbG9nZ2VyID0gTG9nZ2VyLmNyZWF0ZUxvZ2dlcignZXNsaW50Jyk7XG5cbiAgICBsb2dnZXIuZGVidWcoJ0V4ZWN1dGluZyAlbycsIGFyZ3MpO1xuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGV4ZWNhKCdlc2xpbnQnLCBhcmdzKTtcblxuICAgICAgbG9nZ2VyLmRlYnVnKHJlc3VsdCk7XG5cbiAgICAgIHJldHVybiByZXN1bHQuc3Rkb3V0O1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBsb2dnZXIuZGVidWcoZXJyb3IpO1xuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3Iuc3Rkb3V0IHx8IGVycm9yLnN0ZGVycik7XG4gICAgfVxuICB9LFxuICBhc3luYyBsaW50KGFyZ3MgPSBbXSwgY2xpT3B0cyA9IHt9KSB7XG4gICAgY29uc3QgbG9nZ2VyID0gTG9nZ2VyLmNyZWF0ZUxvZ2dlcignZXNsaW50Jyk7XG5cbiAgICB0cnkge1xuICAgICAgbGV0IGVuZExpbmUgPSAnJztcbiAgICAgIGNvbnN0IHJlc3VsdHMgPSBhd2FpdCBlc2xpbnQuZXhlY3V0ZShhcmdzKTtcblxuICAgICAgaWYgKCFyZXN1bHRzLnRyaW0oKSkge1xuICAgICAgICBpZiAoIWNsaU9wdHMucXVpZXQpIHtcbiAgICAgICAgICBsb2dnZXIubG9nKGDinJMgQ2xlYW4gKCR7bmV3IERhdGUoKS50b0xvY2FsZVRpbWVTdHJpbmcoKX0pYCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoIS9cXFxcbnsyfSQvLnRlc3QocmVzdWx0cykpIHtcbiAgICAgICAgZW5kTGluZSA9ICdcXG4nO1xuICAgICAgfVxuXG4gICAgICBsb2dnZXIubG9nKGAke3Jlc3VsdHN9JHtlbmRMaW5lfWApO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBsb2dnZXIuZXJyb3IoZXJyb3IubWVzc2FnZS50cmltKCkpO1xuICAgIH1cbiAgfSxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGVzbGludDtcbiJdfQ==