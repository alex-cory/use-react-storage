"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _lodash = _interopRequireDefault(require("lodash.isempty"));

var _logger = require("../logger");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

const logger = (0, _logger.createLogger)('eslint-help');
logger.debug('Loaded');
const namedOption = /^--/;
const header = /^(\w+(\s+)?)+\:$/i;

function parseNo(option, str) {
  if (!str) return;
  let cmd = str.replace('--', '');

  if (/no-/.test(cmd)) {
    logger.debug('Parsing no option', str);
    cmd = cmd.replace('no-', '');
    option.default = 'true';
  }

  option.option = cmd;
  return option;
}

function parseDouble(arr) {
  const description = arr.slice(2).filter(Boolean).join(' ');

  const _arr2 = _slicedToArray(arr, 2),
        option = _arr2[0],
        alias = _arr2[1];

  return {
    option: option.replace('--', ''),
    type: 'Boolean',
    alias: alias.replace('--', ''),
    description: description
  };
}

function parseRegular(arr) {
  const _arr3 = _slicedToArray(arr, 1),
        item = _arr3[0];

  logger.debug('Parsing %s', item);

  if (!item) {
    return;
  }

  const _arr4 = _slicedToArray(arr, 1),
        optionText = _arr4[0];

  const type = arr[1] || 'Boolean';
  const option = parseNo({}, optionText);
  const helpText = arr.filter(a => a !== optionText && a !== type && a !== '');
  const description = helpText.join(' ');
  option.type = type;

  if (description) {
    option.description = description;
  }

  return option;
}

function parseAlias(arr = []) {
  const _arr5 = _slicedToArray(arr, 1),
        alias = _arr5[0];

  logger.debug('Alias found: %s', alias);
  const option = parseRegular(arr.filter(a => a !== alias));

  if (alias) {
    option.alias = alias.replace('-', '');
  }

  return option;
}

function createOption(arr) {
  let option;

  if (namedOption.test(arr[0]) && namedOption.test(arr[1])) {
    // negated boolean
    option = parseDouble(arr);
  } else if (namedOption.test(arr[0]) && !namedOption.test(arr[1])) {
    // no alias
    option = parseRegular(arr);
  } else {
    // aliased or other
    option = parseAlias(arr);
  }

  return (0, _lodash.default)(option) ? undefined : option;
}

function parseHelp(helpText) {
  return helpText.split('\n').reduce((acc, line, index) => {
    if (!line || index === 0) {
      return acc;
    }

    if (index === 0) {
      return acc;
    }

    if (header.test(line)) {
      acc.push({
        heading: line.replace(':', '')
      });
      return acc;
    }

    const lineArr = line.replace(',', '').trim().split(' ');
    const option = createOption(lineArr);

    if (option.option === 'help') {
      return acc;
    }

    acc.push(option);
    return acc;
  }, []);
}

var _default = {
  parseHelp: parseHelp
};
exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,