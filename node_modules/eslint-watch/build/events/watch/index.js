"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _path = _interopRequireDefault(require("path"));

var _lodash = _interopRequireDefault(require("lodash.debounce"));

var _chokidar = _interopRequireDefault(require("./chokidar"));

var _logger = require("../../logger");

var _eslint = _interopRequireDefault(require("../../eslint"));

var _keyListener = _interopRequireDefault(require("./key-listener"));

var _clear = _interopRequireDefault(require("../../commands/clear"));

var _options = _interopRequireDefault(require("../../cli/options"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

const logger = (0, _logger.createLogger)('events:watch');

function lint() {
  return _lint.apply(this, arguments);
}

function _lint() {
  _lint = _asyncToGenerator(function* (options = {}, eslintArgs = []) {
    if (options.clear) {
      /* istanbul ignore next */
      logger.log(_clear.default.run());
    }

    yield _eslint.default.lint(eslintArgs, options);
  });
  return _lint.apply(this, arguments);
}

var _default = {
  listen(opts) {
    const watcher = _chokidar.default.createWatcher(opts._, {
      ignored: opts.watchIgnore
    });

    const _cli$getCli = _options.default.getCli(opts),
          flags = _cli$getCli.flags,
          dirs = _cli$getCli.dirs;

    const cacheLocation = _path.default.relative(process.cwd(), _path.default.resolve(opts.cacheLocation || '.eslintcache'));

    _keyListener.default.listen(['enter'],
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      yield lint(opts, [...flags, ...dirs]);
    }));

    return watcher.on('ready',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      logger.debug('Ready');
      yield lint(opts, [...flags, ...dirs]);
    }))
    /* istanbul ignore next */
    .on('add', dir => logger.debug(`${dir} added.`)).on('change', (0, _lodash.default)(
    /*#__PURE__*/
    function () {
      var _ref3 = _asyncToGenerator(function* (filePath) {
        if (cacheLocation === filePath) return;
        logger.debug('Detected change:', filePath);
        const changed = opts.changed ? [filePath] : opts._;
        yield lint(opts, [...flags, ...changed]);
      });

      return function (_x) {
        return _ref3.apply(this, arguments);
      };
    }()), opts.watchDelay || 300)
    /* istanbul ignore next */
    .on('error', err => logger.error(err));
  }

};
exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9ldmVudHMvd2F0Y2gvaW5kZXguanMiXSwibmFtZXMiOlsibG9nZ2VyIiwibGludCIsIm9wdGlvbnMiLCJlc2xpbnRBcmdzIiwiY2xlYXIiLCJsb2ciLCJydW4iLCJlc2xpbnQiLCJsaXN0ZW4iLCJvcHRzIiwid2F0Y2hlciIsIndhdGNoIiwiY3JlYXRlV2F0Y2hlciIsIl8iLCJpZ25vcmVkIiwid2F0Y2hJZ25vcmUiLCJjbGkiLCJnZXRDbGkiLCJmbGFncyIsImRpcnMiLCJjYWNoZUxvY2F0aW9uIiwicGF0aCIsInJlbGF0aXZlIiwicHJvY2VzcyIsImN3ZCIsInJlc29sdmUiLCJrZXkiLCJvbiIsImRlYnVnIiwiZGlyIiwiZmlsZVBhdGgiLCJjaGFuZ2VkIiwid2F0Y2hEZWxheSIsImVyciIsImVycm9yIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7Ozs7O0FBRUEsTUFBTUEsTUFBTSxHQUFHLDBCQUFhLGNBQWIsQ0FBZjs7U0FFZUMsSTs7Ozs7NEJBQWYsV0FBb0JDLE9BQU8sR0FBRyxFQUE5QixFQUFrQ0MsVUFBVSxHQUFHLEVBQS9DLEVBQW1EO0FBQ2pELFFBQUlELE9BQU8sQ0FBQ0UsS0FBWixFQUFtQjtBQUNqQjtBQUNBSixNQUFBQSxNQUFNLENBQUNLLEdBQVAsQ0FBV0QsZUFBTUUsR0FBTixFQUFYO0FBQ0Q7O0FBRUQsVUFBTUMsZ0JBQU9OLElBQVAsQ0FBWUUsVUFBWixFQUF3QkQsT0FBeEIsQ0FBTjtBQUNELEc7Ozs7ZUFFYztBQUNiTSxFQUFBQSxNQUFNLENBQUNDLElBQUQsRUFBTztBQUNYLFVBQU1DLE9BQU8sR0FBR0Msa0JBQU1DLGFBQU4sQ0FBb0JILElBQUksQ0FBQ0ksQ0FBekIsRUFBNEI7QUFBRUMsTUFBQUEsT0FBTyxFQUFFTCxJQUFJLENBQUNNO0FBQWhCLEtBQTVCLENBQWhCOztBQURXLHdCQUVhQyxpQkFBSUMsTUFBSixDQUFXUixJQUFYLENBRmI7QUFBQSxVQUVIUyxLQUZHLGVBRUhBLEtBRkc7QUFBQSxVQUVJQyxJQUZKLGVBRUlBLElBRko7O0FBR1gsVUFBTUMsYUFBYSxHQUFHQyxjQUFLQyxRQUFMLENBQWNDLE9BQU8sQ0FBQ0MsR0FBUixFQUFkLEVBQTZCSCxjQUFLSSxPQUFMLENBQWFoQixJQUFJLENBQUNXLGFBQUwsSUFBc0IsY0FBbkMsQ0FBN0IsQ0FBdEI7O0FBRUFNLHlCQUFJbEIsTUFBSixDQUFXLENBQUMsT0FBRCxDQUFYO0FBQUE7QUFBQSxzQkFBc0IsYUFBWTtBQUNoQyxZQUFNUCxJQUFJLENBQUNRLElBQUQsRUFBTyxDQUFDLEdBQUdTLEtBQUosRUFBVyxHQUFHQyxJQUFkLENBQVAsQ0FBVjtBQUNELEtBRkQ7O0FBSUEsV0FDRVQsT0FBTyxDQUNKaUIsRUFESCxDQUNNLE9BRE47QUFBQTtBQUFBLHNCQUNlLGFBQVk7QUFDdkIzQixNQUFBQSxNQUFNLENBQUM0QixLQUFQLENBQWEsT0FBYjtBQUNBLFlBQU0zQixJQUFJLENBQUNRLElBQUQsRUFBTyxDQUFDLEdBQUdTLEtBQUosRUFBVyxHQUFHQyxJQUFkLENBQVAsQ0FBVjtBQUNELEtBSkg7QUFLRTtBQUxGLEtBTUdRLEVBTkgsQ0FNTSxLQU5OLEVBTWNFLEdBQUQsSUFBUzdCLE1BQU0sQ0FBQzRCLEtBQVAsQ0FBYyxHQUFFQyxHQUFJLFNBQXBCLENBTnRCLEVBT0dGLEVBUEgsQ0FRSSxRQVJKLEVBU0k7QUFBQTtBQUFBO0FBQUEsb0NBQVMsV0FBT0csUUFBUCxFQUFvQjtBQUMzQixZQUFJVixhQUFhLEtBQUtVLFFBQXRCLEVBQWdDO0FBRWhDOUIsUUFBQUEsTUFBTSxDQUFDNEIsS0FBUCxDQUFhLGtCQUFiLEVBQWlDRSxRQUFqQztBQUNBLGNBQU1DLE9BQU8sR0FBR3RCLElBQUksQ0FBQ3NCLE9BQUwsR0FBZSxDQUFDRCxRQUFELENBQWYsR0FBNEJyQixJQUFJLENBQUNJLENBQWpEO0FBRUEsY0FBTVosSUFBSSxDQUFDUSxJQUFELEVBQU8sQ0FBQyxHQUFHUyxLQUFKLEVBQVcsR0FBR2EsT0FBZCxDQUFQLENBQVY7QUFDRCxPQVBEOztBQUFBO0FBQUE7QUFBQTtBQUFBLFFBVEosRUFpQkl0QixJQUFJLENBQUN1QixVQUFMLElBQW1CLEdBakJ2QjtBQW1CRTtBQW5CRixLQW9CR0wsRUFwQkgsQ0FvQk0sT0FwQk4sRUFvQmdCTSxHQUFELElBQVNqQyxNQUFNLENBQUNrQyxLQUFQLENBQWFELEdBQWIsQ0FwQnhCLENBREY7QUF1QkQ7O0FBakNZLEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCBkZWJvdW5jZSBmcm9tICdsb2Rhc2guZGVib3VuY2UnO1xuXG5pbXBvcnQgd2F0Y2ggZnJvbSAnLi9jaG9raWRhcic7XG5pbXBvcnQgeyBjcmVhdGVMb2dnZXIgfSBmcm9tICcuLi8uLi9sb2dnZXInO1xuaW1wb3J0IGVzbGludCBmcm9tICcuLi8uLi9lc2xpbnQnO1xuaW1wb3J0IGtleSBmcm9tICcuL2tleS1saXN0ZW5lcic7XG5pbXBvcnQgY2xlYXIgZnJvbSAnLi4vLi4vY29tbWFuZHMvY2xlYXInO1xuaW1wb3J0IGNsaSBmcm9tICcuLi8uLi9jbGkvb3B0aW9ucyc7XG5cbmNvbnN0IGxvZ2dlciA9IGNyZWF0ZUxvZ2dlcignZXZlbnRzOndhdGNoJyk7XG5cbmFzeW5jIGZ1bmN0aW9uIGxpbnQob3B0aW9ucyA9IHt9LCBlc2xpbnRBcmdzID0gW10pIHtcbiAgaWYgKG9wdGlvbnMuY2xlYXIpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIGxvZ2dlci5sb2coY2xlYXIucnVuKCkpO1xuICB9XG5cbiAgYXdhaXQgZXNsaW50LmxpbnQoZXNsaW50QXJncywgb3B0aW9ucyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbGlzdGVuKG9wdHMpIHtcbiAgICBjb25zdCB3YXRjaGVyID0gd2F0Y2guY3JlYXRlV2F0Y2hlcihvcHRzLl8sIHsgaWdub3JlZDogb3B0cy53YXRjaElnbm9yZSB9KTtcbiAgICBjb25zdCB7IGZsYWdzLCBkaXJzIH0gPSBjbGkuZ2V0Q2xpKG9wdHMpO1xuICAgIGNvbnN0IGNhY2hlTG9jYXRpb24gPSBwYXRoLnJlbGF0aXZlKHByb2Nlc3MuY3dkKCksIHBhdGgucmVzb2x2ZShvcHRzLmNhY2hlTG9jYXRpb24gfHwgJy5lc2xpbnRjYWNoZScpKTtcblxuICAgIGtleS5saXN0ZW4oWydlbnRlciddLCBhc3luYyAoKSA9PiB7XG4gICAgICBhd2FpdCBsaW50KG9wdHMsIFsuLi5mbGFncywgLi4uZGlyc10pO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIHdhdGNoZXJcbiAgICAgICAgLm9uKCdyZWFkeScsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICBsb2dnZXIuZGVidWcoJ1JlYWR5Jyk7XG4gICAgICAgICAgYXdhaXQgbGludChvcHRzLCBbLi4uZmxhZ3MsIC4uLmRpcnNdKTtcbiAgICAgICAgfSlcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgICAgLm9uKCdhZGQnLCAoZGlyKSA9PiBsb2dnZXIuZGVidWcoYCR7ZGlyfSBhZGRlZC5gKSlcbiAgICAgICAgLm9uKFxuICAgICAgICAgICdjaGFuZ2UnLFxuICAgICAgICAgIGRlYm91bmNlKGFzeW5jIChmaWxlUGF0aCkgPT4ge1xuICAgICAgICAgICAgaWYgKGNhY2hlTG9jYXRpb24gPT09IGZpbGVQYXRoKSByZXR1cm47XG5cbiAgICAgICAgICAgIGxvZ2dlci5kZWJ1ZygnRGV0ZWN0ZWQgY2hhbmdlOicsIGZpbGVQYXRoKTtcbiAgICAgICAgICAgIGNvbnN0IGNoYW5nZWQgPSBvcHRzLmNoYW5nZWQgPyBbZmlsZVBhdGhdIDogb3B0cy5fO1xuXG4gICAgICAgICAgICBhd2FpdCBsaW50KG9wdHMsIFsuLi5mbGFncywgLi4uY2hhbmdlZF0pO1xuICAgICAgICAgIH0pLFxuICAgICAgICAgIG9wdHMud2F0Y2hEZWxheSB8fCAzMDBcbiAgICAgICAgKVxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICAub24oJ2Vycm9yJywgKGVycikgPT4gbG9nZ2VyLmVycm9yKGVycikpXG4gICAgKTtcbiAgfSxcbn07XG4iXX0=