"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _package = _interopRequireDefault(require("../package"));

var _eslint = _interopRequireDefault(require("./eslint"));

var _options = _interopRequireDefault(require("./cli/options"));

var _logger = require("./logger");

var _commands = _interopRequireDefault(require("./commands"));

var _watch = _interopRequireDefault(require("./events/watch"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

const logger = (0, _logger.createLogger)('main');
var _default = {
  run([,, ...rawArgs]) {
    return _asyncToGenerator(function* () {
      logger.debug(rawArgs);
      logger.debug(`ESW: v${_package.default.version}`);
      const eslOptions = yield _eslint.default.getHelpOptions();

      const opts = _options.default.createOptions(_options.default.eswOptions, eslOptions);

      const cliOptions = opts.parse(rawArgs);
      logger.debug(cliOptions);

      if (cliOptions.help) {
        logger.debug('Printing help');
        return opts.helpText;
      }

      if (cliOptions.version || cliOptions.versions) {
        return yield _commands.default.run(cliOptions);
      }

      let cmdResult = yield _commands.default.run(cliOptions);

      if (cliOptions.watch) {
        _watch.default.listen(cliOptions);

        return;
      }

      const _options$getCli = _options.default.getCli(cliOptions),
            flags = _options$getCli.flags,
            dirs = _options$getCli.dirs;

      const lintResult = yield _eslint.default.execute([...flags, ...dirs]);
      return `${cmdResult || ''}${lintResult || ''}`;
    })();
  }

};
exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJsb2dnZXIiLCJydW4iLCJyYXdBcmdzIiwiZGVidWciLCJwa2ciLCJ2ZXJzaW9uIiwiZXNsT3B0aW9ucyIsImVzbGludCIsImdldEhlbHBPcHRpb25zIiwib3B0cyIsIm9wdGlvbnMiLCJjcmVhdGVPcHRpb25zIiwiZXN3T3B0aW9ucyIsImNsaU9wdGlvbnMiLCJwYXJzZSIsImhlbHAiLCJoZWxwVGV4dCIsInZlcnNpb25zIiwiY29tbWFuZHMiLCJjbWRSZXN1bHQiLCJ3YXRjaCIsImxpc3RlbiIsImdldENsaSIsImZsYWdzIiwiZGlycyIsImxpbnRSZXN1bHQiLCJleGVjdXRlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7Ozs7O0FBRUEsTUFBTUEsTUFBTSxHQUFHLDBCQUFhLE1BQWIsQ0FBZjtlQUVlO0FBQ1BDLEVBQUFBLEdBQU4sQ0FBVSxJQUFLLEdBQUdDLE9BQVIsQ0FBVixFQUE0QjtBQUFBO0FBQzFCRixNQUFBQSxNQUFNLENBQUNHLEtBQVAsQ0FBYUQsT0FBYjtBQUNBRixNQUFBQSxNQUFNLENBQUNHLEtBQVAsQ0FBYyxTQUFRQyxpQkFBSUMsT0FBUSxFQUFsQztBQUVBLFlBQU1DLFVBQVUsU0FBU0MsZ0JBQU9DLGNBQVAsRUFBekI7O0FBQ0EsWUFBTUMsSUFBSSxHQUFHQyxpQkFBUUMsYUFBUixDQUFzQkQsaUJBQVFFLFVBQTlCLEVBQTBDTixVQUExQyxDQUFiOztBQUNBLFlBQU1PLFVBQVUsR0FBR0osSUFBSSxDQUFDSyxLQUFMLENBQVdaLE9BQVgsQ0FBbkI7QUFFQUYsTUFBQUEsTUFBTSxDQUFDRyxLQUFQLENBQWFVLFVBQWI7O0FBRUEsVUFBSUEsVUFBVSxDQUFDRSxJQUFmLEVBQXFCO0FBQ25CZixRQUFBQSxNQUFNLENBQUNHLEtBQVAsQ0FBYSxlQUFiO0FBQ0EsZUFBT00sSUFBSSxDQUFDTyxRQUFaO0FBQ0Q7O0FBRUQsVUFBSUgsVUFBVSxDQUFDUixPQUFYLElBQXNCUSxVQUFVLENBQUNJLFFBQXJDLEVBQStDO0FBQzdDLHFCQUFhQyxrQkFBU2pCLEdBQVQsQ0FBYVksVUFBYixDQUFiO0FBQ0Q7O0FBRUQsVUFBSU0sU0FBUyxTQUFTRCxrQkFBU2pCLEdBQVQsQ0FBYVksVUFBYixDQUF0Qjs7QUFFQSxVQUFJQSxVQUFVLENBQUNPLEtBQWYsRUFBc0I7QUFDcEJBLHVCQUFNQyxNQUFOLENBQWFSLFVBQWI7O0FBQ0E7QUFDRDs7QUF4QnlCLDhCQTBCRkgsaUJBQVFZLE1BQVIsQ0FBZVQsVUFBZixDQTFCRTtBQUFBLFlBMEJsQlUsS0ExQmtCLG1CQTBCbEJBLEtBMUJrQjtBQUFBLFlBMEJYQyxJQTFCVyxtQkEwQlhBLElBMUJXOztBQTRCMUIsWUFBTUMsVUFBVSxTQUFTbEIsZ0JBQU9tQixPQUFQLENBQWUsQ0FBQyxHQUFHSCxLQUFKLEVBQVcsR0FBR0MsSUFBZCxDQUFmLENBQXpCO0FBRUEsYUFBUSxHQUFFTCxTQUFTLElBQUksRUFBRyxHQUFFTSxVQUFVLElBQUksRUFBRyxFQUE3QztBQTlCMEI7QUErQjNCOztBQWhDWSxDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHBrZyBmcm9tICcuLi9wYWNrYWdlJztcblxuaW1wb3J0IGVzbGludCBmcm9tICcuL2VzbGludCc7XG5pbXBvcnQgb3B0aW9ucyBmcm9tICcuL2NsaS9vcHRpb25zJztcbmltcG9ydCB7IGNyZWF0ZUxvZ2dlciB9IGZyb20gJy4vbG9nZ2VyJztcbmltcG9ydCBjb21tYW5kcyBmcm9tICcuL2NvbW1hbmRzJztcbmltcG9ydCB3YXRjaCBmcm9tICcuL2V2ZW50cy93YXRjaCc7XG5cbmNvbnN0IGxvZ2dlciA9IGNyZWF0ZUxvZ2dlcignbWFpbicpO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGFzeW5jIHJ1bihbLCAsIC4uLnJhd0FyZ3NdKSB7XG4gICAgbG9nZ2VyLmRlYnVnKHJhd0FyZ3MpO1xuICAgIGxvZ2dlci5kZWJ1ZyhgRVNXOiB2JHtwa2cudmVyc2lvbn1gKTtcblxuICAgIGNvbnN0IGVzbE9wdGlvbnMgPSBhd2FpdCBlc2xpbnQuZ2V0SGVscE9wdGlvbnMoKTtcbiAgICBjb25zdCBvcHRzID0gb3B0aW9ucy5jcmVhdGVPcHRpb25zKG9wdGlvbnMuZXN3T3B0aW9ucywgZXNsT3B0aW9ucyk7XG4gICAgY29uc3QgY2xpT3B0aW9ucyA9IG9wdHMucGFyc2UocmF3QXJncyk7XG5cbiAgICBsb2dnZXIuZGVidWcoY2xpT3B0aW9ucyk7XG5cbiAgICBpZiAoY2xpT3B0aW9ucy5oZWxwKSB7XG4gICAgICBsb2dnZXIuZGVidWcoJ1ByaW50aW5nIGhlbHAnKTtcbiAgICAgIHJldHVybiBvcHRzLmhlbHBUZXh0O1xuICAgIH1cblxuICAgIGlmIChjbGlPcHRpb25zLnZlcnNpb24gfHwgY2xpT3B0aW9ucy52ZXJzaW9ucykge1xuICAgICAgcmV0dXJuIGF3YWl0IGNvbW1hbmRzLnJ1bihjbGlPcHRpb25zKTtcbiAgICB9XG5cbiAgICBsZXQgY21kUmVzdWx0ID0gYXdhaXQgY29tbWFuZHMucnVuKGNsaU9wdGlvbnMpO1xuXG4gICAgaWYgKGNsaU9wdGlvbnMud2F0Y2gpIHtcbiAgICAgIHdhdGNoLmxpc3RlbihjbGlPcHRpb25zKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCB7IGZsYWdzLCBkaXJzIH0gPSBvcHRpb25zLmdldENsaShjbGlPcHRpb25zKTtcblxuICAgIGNvbnN0IGxpbnRSZXN1bHQgPSBhd2FpdCBlc2xpbnQuZXhlY3V0ZShbLi4uZmxhZ3MsIC4uLmRpcnNdKTtcblxuICAgIHJldHVybiBgJHtjbWRSZXN1bHQgfHwgJyd9JHtsaW50UmVzdWx0IHx8ICcnfWA7XG4gIH0sXG59O1xuIl19